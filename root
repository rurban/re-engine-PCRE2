{"version":1,"ops":[{"type":1,"author":{"id":"aef584d35767ca3a7a454b62a1a488f95f4439e6"},"timestamp":1501682141,"metadata":{"github-id":"MDU6SXNzdWUyNDczOTc4OTQ=","github-url":"https://github.com/rurban/re-engine-PCRE2/issues/29","origin":"github"},"title":"t/1-basic.t segfaults randomly if PCRE2 is compiled with --enable-jit-sealloc","message":"I have PCRE2 10.30-RC1 built with --enable-jit-sealloc option. This option enabled an alternative JIT memory allocator based on mmaped temporary files. Running t/1-basic.t against such PCRE2 usually results to a segfault:\n\n```\n#0  0xb7f336fb in sljit_free_exec (ptr=0xb775fca0)\n    at src/sljit/sljitProtExecAllocator.c:367\n#1  0xb7f33b0d in sljit_free_code (code=0xb775fca0) at src/sljit/sljitLir.c:486\n#2  0xb7f5973c in _pcre2_jit_free_8 (executable_jit=0x80030540, memctl=0x80293b90)\n    at src/pcre2_jit_misc.c:92\n#3  0xb7f199f8 in pcre2_code_free_8 (code=0x80293b90) at src/pcre2_compile.c:1183\n#4  0xb7771609 in PCRE2_free (my_perl=0x80004160, rx=0x80024e64) at PCRE2.xs:520\n#5  0xb7d84e95 in Perl_pregfree2 () from /lib/libperl.so.5.26\n#6  0xb7de4640 in Perl_sv_clear () from /lib/libperl.so.5.26\n#7  0xb7de4d40 in Perl_sv_free2 () from /lib/libperl.so.5.26\n#8  0xb7d149e4 in Perl_op_clear () from /lib/libperl.so.5.26\n#9  0xb7d14b20 in Perl_op_free () from /lib/libperl.so.5.26\n#10 0xb7d3adb8 in perl_destruct () from /lib/libperl.so.5.26\n#11 0x800009ce in main ()\n```\n\nThis is bacuse sljit_free_exec() does this assignment:\n\n~~~\n    if (SLJIT_UNLIKELY(!free_block-\u003eheader.size)) {\n        free_block-\u003esize += header-\u003esize;\n        header = AS_BLOCK_HEADER(free_block, free_block-\u003esize);\nâ†’       header-\u003eprev_size = free_block-\u003esize;\n    }\n~~~\n\nand the memory pointed by header is read-only at the moment.\n\nA minimal reproducer is:\n\n~~~\nuse Test::More tests =\u003e 1;\nuse re::engine::PCRE2;\n\n\"Hello, world\" !~ /(?\u003c=Moose|Mo), (world)/;\n\"Hello, world\" =~ /(?\u003c=Hello|Hi), (world)/;\nfork;\n\nok(1);\n~~~\n\nRemoving any line (fork(), use Test::More; etc.) mitigates the crash. It's probably some kind of a race condition when the two processes deallocates the memory regions backed by the same file. But I don't understand how that could be possible.\n\nI will forward it to PCRE2 authors as this is probably a PCRE2 bug. If you could reduce the reproducer to a pure PCRE2 C code, it would be great.","files":null}]}